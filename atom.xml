<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八九天</title>
  
  
  <link href="http://blog.whwtf.com/atom.xml" rel="self"/>
  
  <link href="http://blog.whwtf.com/"/>
  <updated>2021-04-15T03:35:10.735Z</updated>
  <id>http://blog.whwtf.com/</id>
  
  <author>
    <name>Whwtf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 Pipenv 建立与管理 Python 虚拟环境</title>
    <link href="http://blog.whwtf.com/Python/pipenv-env.html"/>
    <id>http://blog.whwtf.com/Python/pipenv-env.html</id>
    <published>2021-04-15T03:32:59.000Z</published>
    <updated>2021-04-15T03:35:10.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是-pipenv"><a href="#一、什么是-pipenv" class="headerlink" title="一、什么是 pipenv"></a><a href="##%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-pipenv" title="一、什么是 pipenv"></a>一、什么是 pipenv</h2><p>pipenv 主要包含了 Pipfile、pip、requests 和 virtualenv。Pipfile 是新型依赖管理文件，用于替代过于简陋的 requirements.txt 文件。<br>在 pipenv 管理下，一个项目对应一个 Pipfile，包含项目所使用的环境，依赖名称及版本，支持开发环境与正式环境区分。默认提供 default 和 development 区分。用 Pipfile.lock 提供版本锁定支持 。</p><h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a><a href="##%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" title="二、使用方法"></a>二、使用方法</h2><ul><li>安装  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pip3 install pipenv</span><br><span class="line">#python3</span><br></pre></td></tr></table></figure></li><li>环境创建<br>  新建一个存放当环境的文件夹 project1，并进入该文件夹  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$pipenv --three</span><br><span class="line">#使用当前系统的Python3创建环境</span><br><span class="line">##$pipenv --python 3.6</span><br><span class="line">#指定某一Python版本创建环境</span><br></pre></td></tr></table></figure>  这会在当前文件夹建立一个 Pipfile，指定 pip 源，创建环境解释器及依赖包的位置。</li><li>安装依赖包  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$pipenv install django</span><br><span class="line">##$pipenv install --dev django        #安装依赖包，但只在在Dev环境中关联</span><br><span class="line">##$pipenv install django&#x3D;&#x3D;1.11        #指定版本安装</span><br></pre></td></tr></table></figure>  安装依赖包放入环境文件夹并记录在 pipfile 中</li><li>卸载依赖包  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pipenv uninstall django</span><br><span class="line">##$pipenv uninstall --all        #卸载所有已安装包</span><br></pre></td></tr></table></figure></li><li>运行程序 有两种方式运行程序<br>  1、直接运行  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pipenv run python3 project1.py</span><br></pre></td></tr></table></figure>  2、启动虚拟环境运行  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$pipenv shell      #启动虚拟环境</span><br><span class="line">$python3 project1.py</span><br><span class="line">$exit              #退出虚拟环境</span><br></pre></td></tr></table></figure></li><li>重建环境 在新设备中，通过 git clong 了项目文件并经过 pipenv 初始化后，可以执行：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pipenv install</span><br><span class="line">##$pipenv install -dev        #安装所有依赖包，包含Dev版本</span><br></pre></td></tr></table></figure>  来重建虚拟环境，pipenv 会根据文件夹中的 pipfile 自动选择 Python 版本，依赖包的安装及版本。</li></ul><h2 id="三、其他功能"><a href="#三、其他功能" class="headerlink" title="三、其他功能"></a><a href="##%E4%B8%89%E3%80%81%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD" title="三、其他功能"></a>三、其他功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$pipenv --where        #显示目录信息</span><br><span class="line">$pipenv --venv         #显示虚拟环境信息</span><br><span class="line">$pipenv --py           #显示Python解释器信息</span><br><span class="line">$pipenv graph          #查看目前安装的库及其版本</span><br><span class="line">$pipenv check          #检查安全漏洞</span><br></pre></td></tr></table></figure><ul><li>使用 pipenv install 安装依赖包时默认用的国外源，速度慢，可改成国内源。 修改 pipfile 中 url 参数的值，比如改成以下其中一条：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&quot;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;&quot;</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;&quot;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是-pipenv&quot;&gt;&lt;a href=&quot;#一、什么是-pipenv&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 pipenv&quot;&gt;&lt;/a&gt;&lt;a href=&quot;##%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6</summary>
      
    
    
    
    <category term="Python" scheme="http://blog.whwtf.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://blog.whwtf.com/tags/Python/"/>
    
    <category term="Pipenv" scheme="http://blog.whwtf.com/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>Armbian 安装并改为国内软件源</title>
    <link href="http://blog.whwtf.com/Linux/SomePi/armbiansource.html"/>
    <id>http://blog.whwtf.com/Linux/SomePi/armbiansource.html</id>
    <published>2021-04-14T03:17:54.000Z</published>
    <updated>2021-04-14T03:50:37.717Z</updated>
    
    <content type="html"><![CDATA[<p>Armbian是 <a href="https://www.armbian.com/">@armbian.com</a>] 专为RaspberryPi、NanaoPi、RockPi……这类使用arm soc的微小计算机/开发板编译制作的操作系统。运行稳定，功能强大。内置armbian-config配置程序，可以方便的对系统进行设置和安装一些第三方软件。<br><img src="https://gitee.com/whwtf/upic/raw/master/uPic/armbian-config2020-09-25.png"><br><img src="https://gitee.com/whwtf/upic/raw/master/uPic/soft2020-09-25.png"></p><h2 id="Armbian安装"><a href="#Armbian安装" class="headerlink" title="Armbian安装"></a>Armbian安装</h2><p>从 <a href="https://www.armbian.com/">armbian官网</a> 下载对应的系统镜像文件，用烧卡软件写入到TF卡中。个人认为 <strong><a href="https://www.balena.io/etcher">Etcher</a></strong> 比较好用。<br><img src="https://gitee.com/whwtf/upic/raw/master/uPic/etcher2020-09-25.png"><br>插入卡，通电，等待几分钟就可以SSH连接了。第一次用 root@1234 登录，首次进入系统需要更改root密码，新建用户。然后重启，用新建的用户登录，使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo armbian-config</span><br></pre></td></tr></table></figure><p>对系统进行设置和按需安装第三方软件。</p><h2 id="更改apt源为国内"><a href="#更改apt源为国内" class="headerlink" title="更改apt源为国内"></a>更改apt源为国内</h2><p><a href="https://www.armbian.com/">Armbian</a> 默认软件源为 <a href="https://www.debian.org/">Debian</a> 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。<br>国内Linux源有很多，通常使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学</a> 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。<br>首先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure><p><a href="https://www.armbian.com/">Armbian</a> 更改源的时候需要改两个地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure><p>将里面内容全部注释掉，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free</span><br></pre></td></tr></table></figure><p>然后还有一个地方需要更改，是Armbian自身的内容更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;armbian.list</span><br></pre></td></tr></table></figure><p>注释掉原来内容，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“buster”根据版本更改</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;armbian&#x2F; buster main buster-utils buster-desktop</span><br></pre></td></tr></table></figure><p>之后就可以愉快的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt upgrade</span><br><span class="line">or</span><br><span class="line">$ sudo apt dist-upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Armbian是 &lt;a href=&quot;https://www.armbian.com/&quot;&gt;@armbian.com&lt;/a&gt;] 专为RaspberryPi、NanaoPi、RockPi……这类使用arm soc的微小计算机/开发板编译制作的操作系统。运行稳定，功能强大。内置ar</summary>
      
    
    
    
    <category term="Linux" scheme="http://blog.whwtf.com/categories/Linux/"/>
    
    <category term="SomePi" scheme="http://blog.whwtf.com/categories/Linux/SomePi/"/>
    
    
    <category term="Armbian" scheme="http://blog.whwtf.com/tags/Armbian/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.whwtf.com/uncategorized/hello-world.html"/>
    <id>http://blog.whwtf.com/uncategorized/hello-world.html</id>
    <published>2021-04-14T02:54:08.376Z</published>
    <updated>2021-04-14T02:54:08.376Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
