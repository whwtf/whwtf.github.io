{"meta":{"title":"八九天","subtitle":"","description":"春暖花开，八九天！","author":"Whwtf","url":"http://blog.whwtf.com","root":"/"},"pages":[{"title":"about","date":"2021-04-09T10:21:20.000Z","updated":"2021-04-14T02:54:08.380Z","comments":true,"path":"about/index.html","permalink":"http://blog.whwtf.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-04-14T04:20:52.067Z","updated":"2021-04-14T02:54:08.380Z","comments":false,"path":"categories/index.html","permalink":"http://blog.whwtf.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-14T04:21:14.405Z","updated":"2021-04-14T02:54:08.380Z","comments":false,"path":"tags/index.html","permalink":"http://blog.whwtf.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"部署 Code-Server，随时随地 VsCode","slug":"deploy-code-server","date":"2021-06-05T02:22:20.000Z","updated":"2021-06-05T02:57:06.141Z","comments":true,"path":"Programing/deploy-code-server.html","link":"","permalink":"http://blog.whwtf.com/Programing/deploy-code-server.html","excerpt":"","text":"Code-Server 是一个可以在远程服务器上运行 VS Code 的工具。拥有与 VS Code 完全相同的界面和使用方法。 将其部署在远程服务器上，就可以通过 Edge、Chrome 等浏览器在任何设备上运用完全一致的环境进行写作与开发，一切计算都在服务器上进行，不用考虑终端设备的性能。 在Releases页面找到相应的 rpm 或者 deb 软件包下载并上传到远程服务器（也可以直接在服务器上使用 wget 等工具直接下载）并安装。 然后，创建 ～/.config/code-server/config.yaml 文件，内容如下： 1234bind-addr: 0.0.0.0:8999 #远程访问的端口auth: passwordpassword: xxxxxxxxx #访问时登陆的密码cert: true #启用https，不然有些功能限制使用 编辑 /lib/systemd/system/code-server@.service 文件，内容修改如下： 12345678910111213[Unit]Description&#x3D;code-serverAfter&#x3D;network.target[Service]Type&#x3D;execExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;code-server --cert 公钥 --cert-key 私钥ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;code-server --cert 公钥 --cert-key 私钥Restart&#x3D;alwaysUser&#x3D;%i[Install]WantedBy&#x3D;default.target 保存退出后，执行如下命令： 1sudo systemctl enable --now code-server@username #username替换成当前登陆用户名 之后，就可以在浏览器中使用 https://服务器ip:设定的端口 的形式来访问 code-server 了。","categories":[{"name":"Programing","slug":"Programing","permalink":"http://blog.whwtf.com/categories/Programing/"}],"tags":[{"name":"Code-Server","slug":"Code-Server","permalink":"http://blog.whwtf.com/tags/Code-Server/"}]},{"title":"在树莓派上操作 rgbLED 显示不同颜色","slug":"rpi-rgbled","date":"2021-04-15T03:52:17.000Z","updated":"2021-04-15T03:53:39.277Z","comments":true,"path":"Linux/SomePi/rpi-rgbled.html","link":"","permalink":"http://blog.whwtf.com/Linux/SomePi/rpi-rgbled.html","excerpt":"","text":"常见的 rgbLED 有四根引脚，一个 GND，另外三个分别是红绿蓝三色控制脚。通常由输入的电压不同来显示不同的颜色。但是树莓派的 GPIO 输出的是数字信号，这里可以用编程的方式来模拟电压的变化。树莓派上用 PWM（脉宽调制）方法来实现，这是一种对模拟信号电平进行数字编码的方法。PWM 可以简单理解为，通过可控频率的高低电平切换来实现模拟电压变化的方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import RPi.GPIO as GPIOimport timeR, G, B &#x3D; 20, 16, 21GPIO.setwarnings(False)GPIO.setmode(GPIO.BCM)GPIO.setup(R, GPIO.OUT)GPIO.setup(G, GPIO.OUT)GPIO.setup(B, GPIO.OUT)pwmR &#x3D; GPIO.PWM(R, 70) pwmG &#x3D; GPIO.PWM(G, 70)pwmB &#x3D; GPIO.PWM(B, 70)pwmR.start(0)pwmG.start(0)pwmB.start(0)try: t &#x3D; 0.5 while True: pwmR.ChangeDutyCycle(100) pwmG.ChangeDutyCycle(0) pwmB.ChangeDutyCycle(0) time.sleep(t) pwmR.ChangeDutyCycle(0) pwmG.ChangeDutyCycle(100) pwmB.ChangeDutyCycle(0) time.sleep(t) pwmR.ChangeDutyCycle(0) pwmG.ChangeDutyCycle(0) pwmB.ChangeDutyCycle(100) time.sleep(t) pwmR.ChangeDutyCycle(100) pwmG.ChangeDutyCycle(100) pwmB.ChangeDutyCycle(0) time.sleep(t) pwmR.ChangeDutyCycle(100) pwmG.ChangeDutyCycle(0) pwmB.ChangeDutyCycle(100) time.sleep(t) pwmR.ChangeDutyCycle(0) pwmG.ChangeDutyCycle(100) pwmB.ChangeDutyCycle(100) time.sleep(t) pwmR.ChangeDutyCycle(100) pwmG.ChangeDutyCycle(100) pwmB.ChangeDutyCycle(100) time.sleep(t) for r in range(0, 101, 20): pwmR.ChangeDutyCycle(r) for g in range(0, 101, 20): pwmG.ChangeDutyCycle(g) for b in range(0, 101, 20): pwmB.ChangeDutyCycle(b) time.sleep(0.05)except KeyboardInterrupt: passpwmR.stop()pwmG.stop()pwmB.stop()GPIO.cleanup()","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"}],"tags":[{"name":"RaspberryPi","slug":"RaspberryPi","permalink":"http://blog.whwtf.com/tags/RaspberryPi/"},{"name":"rgbLED","slug":"rgbLED","permalink":"http://blog.whwtf.com/tags/rgbLED/"}]},{"title":"在树莓派上操作 TM1637 主控的四位数码管","slug":"rpi-tm1637","date":"2021-04-15T03:49:29.000Z","updated":"2021-04-15T03:54:02.939Z","comments":true,"path":"Linux/SomePi/rpi-tm1637.html","link":"","permalink":"http://blog.whwtf.com/Linux/SomePi/rpi-tm1637.html","excerpt":"","text":"TM1637 驱动的数码管操作简单，只需要 DIO（串行数据）和 CLK（时钟控制）两个引脚就可以工作，3.3V 和 5V 电压都可以。在 GitHub 上已经有先贤写好了控制模块，拿过来用就可以了，应用最多的就是 tm1637.py。 在使用的时候，当然首先就是： 1import tm1637 唯一需要注意的是这个模块当中 显示内容的传递是通过列表（list）来进行的 。简单使用如下： 1234567891011121314import RPi.GPIO as GPIOimport timeimport tm1637CLK &#x3D; 21 DIO &#x3D; 20 GPIO.setmode(GPIO.BCM)GPIO.setwarnings(False) d &#x3D; tm1637.TM1637(CLK, DATA) d.showDoublePoint(1) d.showData([5,6,7,9]) GPIO.cleanup() 其他进阶应用无非就是通过不通方法改变列表的内容来实现应用的目的，比方说一个 数字时钟 ： 1234567891011121314151617181920212223242526272829import tm1637import RPi.GPIO as GPIOimport timeCLK &#x3D; 21DATA &#x3D; 20GPIO.setmode(GPIO.BCM)GPIO.setwarnings(False)HHMMFORMAT &#x3D; &#39;%H:%M&#39; digital1637 &#x3D; tm1637.TM1637(CLK, DATA)digital1637.showDoublePoint(1)while(True): timenow &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M&#39;,time.localtime(time.time())) curTime &#x3D; time.strftime(HHMMFORMAT, time.localtime(time.time())) if(curTime !&#x3D; lastTime): timer &#x3D; time.localtime() number &#x3D; [timer.tm_hour&#x2F;&#x2F;10, timer.tm_hour%10, timer.tm_min&#x2F;&#x2F;10, timer.tm_min%10] digital1637.showData(number) lastTime &#x3D; curTime time.sleep(0.1)GPIO.cleanup()","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"}],"tags":[{"name":"RaspberryPi","slug":"RaspberryPi","permalink":"http://blog.whwtf.com/tags/RaspberryPi/"},{"name":"TM-1637","slug":"TM-1637","permalink":"http://blog.whwtf.com/tags/TM-1637/"}]},{"title":"Linux 终端增强（通过 zsh 与 oh-my-zsh）","slug":"tem-zsh","date":"2021-04-15T03:45:12.000Z","updated":"2021-04-15T03:48:10.269Z","comments":true,"path":"uncategorized/tem-zsh.html","link":"","permalink":"http://blog.whwtf.com/uncategorized/tem-zsh.html","excerpt":"","text":"本文适用于 Debian 系 Linux，MacOS 同样可以。首先安装 zsh （这里有详细说明）： 12sudo apt updatesudo apt install zsh 然后，将 zsh 设置为系统默认终端： 1chsh -s $(which zsh) 接下来安装 oh-my-zsh，这是 zsh 的终极扩展和配置工具： 1sh -c &quot;$(wget https:&#x2F;&#x2F;raw.github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh -O -)&quot; oh-my-zsh 的美丽外观得益于其自带的许多主题，但是其中很多需要 Poweline-fonts，所以海需要安装： 1sudo apt install fonts-powerline 现在可以通过修改 on-my-zsh 的配置文件来选择一个喜欢的主题了（这里有内置所有主题的预览）： 1nano ~&#x2F;.zshrc 找到主题定义这一行，是这样的： 1ZSH_THEME&#x3D;&quot;agnoster&quot; # agnoster是个人喜欢的 oh-my-zsh 同样支持非常多的插件来扩展功能，同样在. zshrc 配置文件中： 1nano ~&#x2F;.zshrc 找到： 1plugins&#x3D;(git) # 默认只启用了git插件 这里有所有插件列表及介绍。还有一些功能插件不是内置的，需要手动安装。1、zsh-syntax-highlighting，让 zsh 拥有了语法高亮功能 1sudo apt install zsh-syntax-highlighting 然后修改配置文件，在末尾增加一行： 1source &#x2F;usr&#x2F;share&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh 2、zsh-autosuggestions，记录曾经输入过的命令，方便重复输入： 12git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions.gitsudo cp -r zsh-autosuggestions &#x2F;usr&#x2F;share&#x2F; 修改配置文件，在末尾添加： 1source &#x2F;usr&#x2F;share&#x2F;zsh-autosuggestions&#x2F;zsh-autosuggestions.zsh 大功告成，现在退出终端，注销用户然后重新登录，就可以打开增强之后的终端了。","categories":[],"tags":[]},{"title":"MySql基础学习","slug":"mysql-base","date":"2021-04-15T03:39:06.000Z","updated":"2021-04-15T03:43:38.363Z","comments":true,"path":"Programing/DataBase/mysql-base.html","link":"","permalink":"http://blog.whwtf.com/Programing/DataBase/mysql-base.html","excerpt":"","text":"1. MySQL 简介 1.1 什么是数据库 ？数据库（_Database_）是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。 主流的数据库有：sqlserver，mysql，Oracle、SQLite、Access、MS SQL Server 等，本文主要讲述的是 MySQL 。 MySQL 是一种开放源代码的关系型数据库管理系统（RDBMS），MySQL 数据库系统使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。在 WEB 应用方面 MySQL 是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。 1.2 数据库管理是干什么用的？ a. 将数据保存到文件或内存 b. 接收特定的命令，然后对文件进行相应的操作 PS：如果有了以上管理系统，无须自己再去创建文件和文件夹，而是直接传递 命令 给上述软件，让其来进行文件操作，他们统称为数据库管理系统（DBMS，Database Management System） 2. MySQL 安装 2.1 安装12345$sudo apt-get update$sudo apt-get install mysql-server$sudo apt isntall mysql-client$sudo apt install libmysqlclient-dev$sudo mysql_secure_installation #运行安全脚本，设置 root 密码 2.2 允许远程连接修改配置文件 mysqld.cnf $sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf 将 bind-address = 127.0.0.1 注释掉。 连接数据库 mysql -u root -p 执行授权命令： 12grant all on *.* to root@&#39;%&#39; identified by &#39;PASSWORD&#39; with grant option;flush privileges; 退出 MySQL，重启 MySQL 服务： service mysql restart 3. MySQL 操作 3.1 连接数据库mysql -u user -p 退出连接： QUIT 或者 Ctrl+D 3.2 查看、创建、使用数据库 查看数据库: show databases; 默认数据库： mysql - 用户权限相关数据 test - 用于用户测试数据 information_schema - MySQL 本身架构相关数据 创建数据库: create database db_NAME DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 使用数据库: use db_NAME; 显示当前使用的数据库中所有表： SHOW TABLES; 3.3 用户管理 创建用户 create user &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39; identified by &#39;password&#39;; 删除用户 drop user &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39;; 修改用户 rename user &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39;; to &#39;new_USER&#39;@&#39;ip_ADDRESS&#39;; 修改密码 set password for &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39; = Password(&#39;new_PASSWORD&#39;); 注：用户权限相关数据保存在 mysql 数据库的 user 表中，所以也可以直接对其进行操作（不建议） 3.4 权限管理3.4.1 MySQL 用户权限列表：权限说明Select可以进行 SELECT 查询Insert可以进行 INSERT 插入Update可以进行 UPDATE 修改数据Delete可以进行 DELETE 删除数据Create可以创建新的数据库和表Drop可以删除现有数据库和表Reload可以执行刷新和重新加载 MySQL 所用各种内部缓存的特定命令，包括日志、权限、主机、查询和表Shutdown可以关闭 MySQL 服务器Process可以通过 SHOW PROCESSLIST 命令查看其他用户的进程File可以执行 SELECT INTO OUTFILE 和 LOAD DATA INFILE 命令Grant可以将已经授予给该用户自己的权限再授予其他用户References目前没有作用Index可以创建和删除表索引Alter可以重命名和修改表结构Show_db可以查看服务器上所有数据库的名字Super可以执行某些强大的管理功能，例如通过 KILL 命令删除用户进程，使用 SET GLOBAL 修改全局 MySQL 变量，执行关于复制和日志的各种命令Create_tmp_table可以创建临时表Lock_tables可以使用 LOCK TABLES 命令阻止对表的访问 / 修改Execute可以执行存储过程Repl_slave可以读取用于维护复制数据库环境的二进制日志文件Repl_client可以确定复制从服务器和主服务器的位置Create_view可以创建视图Show_view可以查看视图或了解视图如何执行Create_routine可以更改或放弃存储过程和函数Alter_routine可以修改或删除存储函数及函数Create_user可以执行 CREATE USER 创建新的 MySQL 账户Event可以创建、修改和删除事件Trigger可以创建和删除触发器 3.4.2 MySQL 数据库权限用法：方法说明数据库名.*数据库中的所有内容数据库名. 表名指定数据库中的某张表数据库名. 存储过程指定数据库中的存储过程* . *所有数据库的所有内容 3.4.3 MySQL 对于用户和 IP 的限制方法：方法说明用户名 @IP 地址用户只能在改 IP 下才能访问用户名 @192.168.1.%用户只能在改 IP 段下才能访问 (通配符 % 表示任意)用户名 @%用户可以再任意 IP 下访问 (默认 IP 地址为 %) 3.4.4 权限控制 查看用户的权限： show grants for &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39;; 授权 grant 权限 on 数据库.表 to &#39;user_NAME&#39;@&#39;ip_ADDRESS&#39;; 取消授权 revoke 权限 on 数据库.表 from &#39;用户名&#39;@&#39;IP地址&#39;; 4. MySQL 表操作 4.1 查看表 show tables; # 查看数据库全部表 select * from 表名; # 查看表所有内容 4.2 创建表12345create table 表名( 列名 类型 是否可以为空 是否自动增长(可选)， 列名 类型 是否可以为空， 指定主键)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8； 例： 123456CREATE TABLE &#96;tab_NAME&#96;( &#96;nid&#96; int(11) NOT NULL auto_increment, &#96;name&#96; varchar(255) NOT NULL, &#96;email&#96; varchar(255), PRIMARY KEY(&#96;nid&#96;))ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8; _注_： 默认值，创建列时可以指定默认值，当插入数据时如果未主动设置，则自动添加默认值。 自增 (auto_increment)，如果为某列设置自增列，插入数据时无需设置此列，默认将自增（表中只能有一个自增列）注意：对于自增列，必须是索引（含主键），对于自增可以设置步长和起始值。 主键，一种特殊的唯一索引，不允许有空值，如果主键使用单个列，则它的值必须唯一，如果是多列，则其组合必须唯一。 4.3 删除表drop table table_NAME; 4.4 清空表内容12delete from table_NAME;truncate table table_NAME; 4.5 修改表 添加列： alter table 表名 add 列名 类型; 删除列： alter table 表名 drop column 列名; 修改列： alter table table_NAME modify column 列名 类型; alter table table_NAME change 原列名 新列名 类型; 添加主键： alter table table_NAME add primary key(列名); 4.6 基本数据类型MySQL 中定义数据字段的类型对数据库的优化是非常重要的。 MySQL 支持多种类型，大致可以分为三类：数值、日期 / 时间和字符串 (字符) 类型。 4.6.1 数值类型MySQL 支持所有标准 SQL 数值数据类型。 这些类型包括严格数值数据类型 (INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型 (FLOAT、REAL 和 DOUBLE PRECISION)。 关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。 作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。 类型大小范围（有符号）范围（无符号）用途TINYINT1 字节(-128，127)(0，255)小整数值SMALLINT2 字节(-32 768，32 767)(0，65 535)大整数值MEDIUMINT3 字节(-8 388 608，8 388 607)(0，16 777 215)大整数值INT 或 INTEGER4 字节(-2 147 483 648，2 147 483 647)(0，4 294 967 295)大整数值BIGINT8 字节(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)(0，18 446 744 073 709 551 615)极大整数值FLOAT4 字节(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)0，(1.175 494 351 E-38，3.402 823 466 E+38)单精度浮点数值DOUBLE8 字节(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)双精度浮点数值DECIMAL对 DECIMAL(M,D) ，如果 M&gt;D，为 M+2 否则为 D+2依赖于 M 和 D 的值依赖于 M 和 D 的值小数值 4.6.2 日期和时间类型表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。 每个时间类型有一个有效值范围和一个 “零” 值，当指定不合法的 MySQL 不能表示的值时使用 “零” 值。 类型大小 (字节)范围格式用途DATE31000-01-01/9999-12-31YYYY-MM-DD日期值TIME3'-838:59:59'/'838:59:59'HH:MM:SS时间值或持续时间YEAR11901/2155YYYY年份值DATETIME81000-01-01 00:00:00/9999-12-31 23:59:59YYYY-MM-DD HH:MM:SS混合日期和时间值TIMESTAMP41970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07YYYYMMDD HHMMSS混合日期和时间值，时间戳 4.6.3 字符串类型字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。 类型大小用途CHAR0-255 字节定长字符串VARCHAR0-65535 字节变长字符串TINYBLOB0-255 字节不超过 255 个字符的二进制字符串TINYTEXT0-255 字节短文本字符串BLOB0-65 535 字节二进制形式的长文本数据TEXT0-65 535 字节长文本数据MEDIUMBLOB0-16 777 215 字节二进制形式的中等长度文本数据MEDIUMTEXT0-16 777 215 字节中等长度文本数据LONGBLOB0-4 294 967 295 字节二进制形式的极大文本数据LONGTEXT0-4 294 967 295 字节极大文本数据 CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。 BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。 有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。 5 MySQL 表内容操作 5.1 增加内容 insert into table_NAME(列名,列名...) values (值,值,...)； insert into table_NAME(列名,列名...) values (值,值,...),(值,值,值...)； insert into table_NAME(列名,列名...) select (列名,列名...) from table_NAME； 例： insert into table_NAME(name,email) values(&#39;wh&#39;,&#39;wh@gmail.com&#39;); 5.2 删除内容 delete from table_NAME; # 删除table_NAME表里全部数据 delete from table_NAME where id＝1; # 删除 ID =1 那一行数据 delete from table_NAME where id＝1 and name＝&#39;wh&#39;; # 删除 ID =1 并且 name=&#39;wh&#39; 那一行数据 5.3 更改内容update table_NAME set name＝&#39;wh&#39; where id=1; 5.4 查询内容 select * from table_NAME; select * from table_NAME where id &gt; 1; select nid,name,gender as gg from table_NAME where id &gt; 1; 例： a. 条件判断 where select * from table_NAME where id &gt; 1 and name != &#39;wh&#39; and num = 12; select * from table_NAME where id between 5 and 16; select * from table_NAME where id in (11,22,33); select * from table_NAME where id not in (11,22,33); select * from table_NAME where id in (select nid from table_NAME); b. 通配符 like select * from table_NAME where name like &#39;www%&#39;; # www开头的所有（多个字符串） select * from table_NAME where name like &#39;www_&#39;; # zhang开头的所有（一个字符） c. 限制 limit select * from table_NAME limit 5; # 前5行 select * from table_NAME limit 4,5; # 从第4行开始的5行 select * from table_NAME limit 5 offset 4; # 从第4行开始的5行 d. 排序 asc、desc select * from table_NAME order by nid asc; # 根据 nid 从小到大排列 select * from table_NAME order by nid desc; # 根据 nid 从大到小排列 select * from table_NAME order by nid desc,nid1 asc; # 根据 nid 从大到小排列，如果相同则按 nid1 从小到大排序 e. 分组 group by select num from table_NAME group by num; select num,nid from table_NAME group by num,nid; select num,nid from table_NAME where nid &gt; 10 group by num,nid order nid desc; select num,nid,count(*),sum(score),max(score),min(score) from table_NAME group by num,nid; select num from table_NAME group by num having max(id) &gt; 10; 注意：group by 必须在 where 之后，order by 之前 本文部分内容来源与 “马哥教育”","categories":[{"name":"Programing","slug":"Programing","permalink":"http://blog.whwtf.com/categories/Programing/"},{"name":"DataBase","slug":"Programing/DataBase","permalink":"http://blog.whwtf.com/categories/Programing/DataBase/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://blog.whwtf.com/tags/MySQL/"}]},{"title":"用 Pipenv 建立与管理 Python 虚拟环境","slug":"pipenv-env","date":"2021-04-15T03:32:59.000Z","updated":"2021-04-15T03:43:07.968Z","comments":true,"path":"Programing/Python/pipenv-env.html","link":"","permalink":"http://blog.whwtf.com/Programing/Python/pipenv-env.html","excerpt":"","text":"一、什么是 pipenvpipenv 主要包含了 Pipfile、pip、requests 和 virtualenv。Pipfile 是新型依赖管理文件，用于替代过于简陋的 requirements.txt 文件。在 pipenv 管理下，一个项目对应一个 Pipfile，包含项目所使用的环境，依赖名称及版本，支持开发环境与正式环境区分。默认提供 default 和 development 区分。用 Pipfile.lock 提供版本锁定支持 。 二、使用方法 安装 12$pip3 install pipenv#python3 环境创建 新建一个存放当环境的文件夹 project1，并进入该文件夹 1234$pipenv --three#使用当前系统的Python3创建环境##$pipenv --python 3.6#指定某一Python版本创建环境 这会在当前文件夹建立一个 Pipfile，指定 pip 源，创建环境解释器及依赖包的位置。 安装依赖包 123$pipenv install django##$pipenv install --dev django #安装依赖包，但只在在Dev环境中关联##$pipenv install django&#x3D;&#x3D;1.11 #指定版本安装 安装依赖包放入环境文件夹并记录在 pipfile 中 卸载依赖包 12$pipenv uninstall django##$pipenv uninstall --all #卸载所有已安装包 运行程序 有两种方式运行程序 1、直接运行 1$pipenv run python3 project1.py 2、启动虚拟环境运行 123$pipenv shell #启动虚拟环境$python3 project1.py$exit #退出虚拟环境 重建环境 在新设备中，通过 git clong 了项目文件并经过 pipenv 初始化后，可以执行： 12$pipenv install##$pipenv install -dev #安装所有依赖包，包含Dev版本 来重建虚拟环境，pipenv 会根据文件夹中的 pipfile 自动选择 Python 版本，依赖包的安装及版本。 三、其他功能12345$pipenv --where #显示目录信息$pipenv --venv #显示虚拟环境信息$pipenv --py #显示Python解释器信息$pipenv graph #查看目前安装的库及其版本$pipenv check #检查安全漏洞 使用 pipenv install 安装依赖包时默认用的国外源，速度慢，可改成国内源。 修改 pipfile 中 url 参数的值，比如改成以下其中一条： 123456url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&quot;url &#x3D; &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&quot;url &#x3D; &quot;https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;url &#x3D; &quot;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;&quot;url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;&quot;url &#x3D; &quot;http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;","categories":[{"name":"Programing","slug":"Programing","permalink":"http://blog.whwtf.com/categories/Programing/"},{"name":"Python","slug":"Programing/Python","permalink":"http://blog.whwtf.com/categories/Programing/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/tags/Python/"},{"name":"Pipenv","slug":"Pipenv","permalink":"http://blog.whwtf.com/tags/Pipenv/"}]},{"title":"Armbian 安装并改为国内软件源","slug":"armbiansource","date":"2021-04-14T03:17:54.000Z","updated":"2021-04-14T03:50:37.717Z","comments":true,"path":"Linux/SomePi/armbiansource.html","link":"","permalink":"http://blog.whwtf.com/Linux/SomePi/armbiansource.html","excerpt":"","text":"Armbian是 @armbian.com] 专为RaspberryPi、NanaoPi、RockPi……这类使用arm soc的微小计算机/开发板编译制作的操作系统。运行稳定，功能强大。内置armbian-config配置程序，可以方便的对系统进行设置和安装一些第三方软件。 Armbian安装从 armbian官网 下载对应的系统镜像文件，用烧卡软件写入到TF卡中。个人认为 Etcher 比较好用。插入卡，通电，等待几分钟就可以SSH连接了。第一次用 root@1234 登录，首次进入系统需要更改root密码，新建用户。然后重启，用新建的用户登录，使用命令 1$ sudo armbian-config 对系统进行设置和按需安装第三方软件。 更改apt源为国内Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。首先： 1$ sudo apt install apt-transport-https ca-certificates Armbian 更改源的时候需要改两个地方： 1$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list 将里面内容全部注释掉，添加： 123456789# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free 然后还有一个地方需要更改，是Armbian自身的内容更新源 1$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;armbian.list 注释掉原来内容，添加： 12“buster”根据版本更改deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;armbian&#x2F; buster main buster-utils buster-desktop 之后就可以愉快的 1234$ sudo apt update$ sudo apt upgradeor$ sudo apt dist-upgrade","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"}],"tags":[{"name":"Armbian","slug":"Armbian","permalink":"http://blog.whwtf.com/tags/Armbian/"}]}],"categories":[{"name":"Programing","slug":"Programing","permalink":"http://blog.whwtf.com/categories/Programing/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"},{"name":"DataBase","slug":"Programing/DataBase","permalink":"http://blog.whwtf.com/categories/Programing/DataBase/"},{"name":"Python","slug":"Programing/Python","permalink":"http://blog.whwtf.com/categories/Programing/Python/"}],"tags":[{"name":"Code-Server","slug":"Code-Server","permalink":"http://blog.whwtf.com/tags/Code-Server/"},{"name":"RaspberryPi","slug":"RaspberryPi","permalink":"http://blog.whwtf.com/tags/RaspberryPi/"},{"name":"rgbLED","slug":"rgbLED","permalink":"http://blog.whwtf.com/tags/rgbLED/"},{"name":"TM-1637","slug":"TM-1637","permalink":"http://blog.whwtf.com/tags/TM-1637/"},{"name":"MySQL","slug":"MySQL","permalink":"http://blog.whwtf.com/tags/MySQL/"},{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/tags/Python/"},{"name":"Pipenv","slug":"Pipenv","permalink":"http://blog.whwtf.com/tags/Pipenv/"},{"name":"Armbian","slug":"Armbian","permalink":"http://blog.whwtf.com/tags/Armbian/"}]}