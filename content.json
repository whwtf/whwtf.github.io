{"meta":{"title":"八九天","subtitle":"","description":"春暖花开，八九天！","author":"Whwtf","url":"http://blog.whwtf.com","root":"/"},"pages":[{"title":"about","date":"2021-04-09T10:21:20.000Z","updated":"2021-04-14T02:54:08.380Z","comments":true,"path":"about/index.html","permalink":"http://blog.whwtf.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-04-14T04:20:52.067Z","updated":"2021-04-14T02:54:08.380Z","comments":false,"path":"categories/index.html","permalink":"http://blog.whwtf.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-14T04:21:14.405Z","updated":"2021-04-14T02:54:08.380Z","comments":false,"path":"tags/index.html","permalink":"http://blog.whwtf.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"用 Pipenv 建立与管理 Python 虚拟环境","slug":"pipenv-env","date":"2021-04-15T03:32:59.000Z","updated":"2021-04-15T03:35:10.735Z","comments":true,"path":"Python/pipenv-env.html","link":"","permalink":"http://blog.whwtf.com/Python/pipenv-env.html","excerpt":"","text":"一、什么是 pipenvpipenv 主要包含了 Pipfile、pip、requests 和 virtualenv。Pipfile 是新型依赖管理文件，用于替代过于简陋的 requirements.txt 文件。在 pipenv 管理下，一个项目对应一个 Pipfile，包含项目所使用的环境，依赖名称及版本，支持开发环境与正式环境区分。默认提供 default 和 development 区分。用 Pipfile.lock 提供版本锁定支持 。 二、使用方法 安装 12$pip3 install pipenv#python3 环境创建 新建一个存放当环境的文件夹 project1，并进入该文件夹 1234$pipenv --three#使用当前系统的Python3创建环境##$pipenv --python 3.6#指定某一Python版本创建环境 这会在当前文件夹建立一个 Pipfile，指定 pip 源，创建环境解释器及依赖包的位置。 安装依赖包 123$pipenv install django##$pipenv install --dev django #安装依赖包，但只在在Dev环境中关联##$pipenv install django&#x3D;&#x3D;1.11 #指定版本安装 安装依赖包放入环境文件夹并记录在 pipfile 中 卸载依赖包 12$pipenv uninstall django##$pipenv uninstall --all #卸载所有已安装包 运行程序 有两种方式运行程序 1、直接运行 1$pipenv run python3 project1.py 2、启动虚拟环境运行 123$pipenv shell #启动虚拟环境$python3 project1.py$exit #退出虚拟环境 重建环境 在新设备中，通过 git clong 了项目文件并经过 pipenv 初始化后，可以执行： 12$pipenv install##$pipenv install -dev #安装所有依赖包，包含Dev版本 来重建虚拟环境，pipenv 会根据文件夹中的 pipfile 自动选择 Python 版本，依赖包的安装及版本。 三、其他功能12345$pipenv --where #显示目录信息$pipenv --venv #显示虚拟环境信息$pipenv --py #显示Python解释器信息$pipenv graph #查看目前安装的库及其版本$pipenv check #检查安全漏洞 使用 pipenv install 安装依赖包时默认用的国外源，速度慢，可改成国内源。 修改 pipfile 中 url 参数的值，比如改成以下其中一条： 123456url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&quot;url &#x3D; &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&quot;url &#x3D; &quot;https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;url &#x3D; &quot;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;&quot;url &#x3D; &quot;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;&quot;url &#x3D; &quot;http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;&quot;","categories":[{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/tags/Python/"},{"name":"Pipenv","slug":"Pipenv","permalink":"http://blog.whwtf.com/tags/Pipenv/"}]},{"title":"Armbian 安装并改为国内软件源","slug":"armbiansource","date":"2021-04-14T03:17:54.000Z","updated":"2021-04-14T03:50:37.717Z","comments":true,"path":"Linux/SomePi/armbiansource.html","link":"","permalink":"http://blog.whwtf.com/Linux/SomePi/armbiansource.html","excerpt":"","text":"Armbian是 @armbian.com] 专为RaspberryPi、NanaoPi、RockPi……这类使用arm soc的微小计算机/开发板编译制作的操作系统。运行稳定，功能强大。内置armbian-config配置程序，可以方便的对系统进行设置和安装一些第三方软件。 Armbian安装从 armbian官网 下载对应的系统镜像文件，用烧卡软件写入到TF卡中。个人认为 Etcher 比较好用。插入卡，通电，等待几分钟就可以SSH连接了。第一次用 root@1234 登录，首次进入系统需要更改root密码，新建用户。然后重启，用新建的用户登录，使用命令 1$ sudo armbian-config 对系统进行设置和按需安装第三方软件。 更改apt源为国内Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。首先： 1$ sudo apt install apt-transport-https ca-certificates Armbian 更改源的时候需要改两个地方： 1$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list 将里面内容全部注释掉，添加： 123456789# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-freedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free 然后还有一个地方需要更改，是Armbian自身的内容更新源 1$ sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;armbian.list 注释掉原来内容，添加： 12“buster”根据版本更改deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;armbian&#x2F; buster main buster-utils buster-desktop 之后就可以愉快的 1234$ sudo apt update$ sudo apt upgradeor$ sudo apt dist-upgrade","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"}],"tags":[{"name":"Armbian","slug":"Armbian","permalink":"http://blog.whwtf.com/tags/Armbian/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/categories/Python/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.whwtf.com/categories/Linux/"},{"name":"SomePi","slug":"Linux/SomePi","permalink":"http://blog.whwtf.com/categories/Linux/SomePi/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.whwtf.com/tags/Python/"},{"name":"Pipenv","slug":"Pipenv","permalink":"http://blog.whwtf.com/tags/Pipenv/"},{"name":"Armbian","slug":"Armbian","permalink":"http://blog.whwtf.com/tags/Armbian/"}]}